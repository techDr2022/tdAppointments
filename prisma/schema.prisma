generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum DoctorType {
  INDIVIDUAL
  CLINIC_AFFILIATED
}


model Clinic {
  id          Int       @id @default(autoincrement())
  loginId     String?
  password    String?
  name        String
  address     String?
  phone       String?
  email       String?
  website     String?   @unique
  doctors     Doctor[]  // One-to-many relation with Doctor
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Doctor {
  id              Int           @id @default(autoincrement())
  loginId         String?
  password        String?
  tdWebsite       String?
  name            String
  website         String        @unique
  timings         Json?         // Changed to JSON to store object
  whatsapp        String?
  sid_doctor      String?
  sid_Ack         String?
  sid_Pcf         String?
  sid_resch       String?
  sid_Pcn         String?
  sid_Rm          String?
  sid_Fd          String?
  qualifications  String?       // For EHR
  specialization  String?       // For EHR
  registrationNo  String?       // For EHR
  image_slug      String?       // Image slug for doctor's profile picture
  feedback_link   String?       // Link for patient feedback/reviews
  map_location    String?       // Google Maps or location link
  type            DoctorType    @default(INDIVIDUAL)
  clinicId        Int?          // Optional foreign key for Clinic
  clinic          Clinic?       @relation(fields: [clinicId], references: [id], onDelete: SetNull)
  services        Service[]
  timeslots       Timeslot[]
  appointments    Appointment[]
  ehrRecords      EhrRecord[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}


model Patient {
  id           Int           @id @default(autoincrement())
  name         String
  age          String
  email        String?
  phone        String
  sex          String?       // Male, Female, Other
  relationship String?       // Relationship when booking for others (e.g., Father, Mother, Friend)
  appointments Appointment[]
  ehrRecords   EhrRecord[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@unique([relationship, name, phone])
}

model Appointment {
  id                     Int              @id @default(autoincrement())
  date                   DateTime
  status                 String           @default("PENDING")
  location               String?
  doctorId               Int
  patientId              Int
  serviceId              Int?
  reason                 String?
  timeslotId             Int
  appointmentType        String?          // initial, followup, secondopinion, others
  customAppointmentType  String?          // Custom type when "others" is selected
  bookingType            String?          // myself, others
  relationship           String?          // Relationship when booking for others
  ehrRecord              EhrRecord?
  doctor                 Doctor           @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  patient                Patient          @relation(fields: [patientId], references: [id], onDelete: Cascade)
  service                Service?         @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  timeslot               Timeslot         @relation(fields: [timeslotId], references: [id])
  appointmentJob         AppointmentJobs?
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
}


model Service {
  id           Int           @id @default(autoincrement())
  name         String
  doctorId     Int
  doctor       Doctor        @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  appointments Appointment[]
}

model Timeslot {
  id           Int           @id @default(autoincrement())
  startTime    DateTime
  doctorId     Int
  isAvailable  Boolean       @default(true)
  type         String?
  doctor       Doctor        @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  appointments Appointment[]
}
model AppointmentJobs {
  id            Int         @id @default(autoincrement())
  appointmentId Int         @unique
  feedbackJobId String?
  reminderJobId String?
  createdAt     DateTime    @default(now())
  appointment   Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
}

model EhrRecord {
  id                Int         @id @default(autoincrement())
  appointmentId     Int         @unique  // One-to-one with appointment
  doctorId         Int
  patientId        Int
  date             DateTime
  weight           String?
  temperature      String?
  pulseRate        String?
  bloodPressure    String?
  respirationRate  String?
  oxygenSaturation String?
  painScore        String?
  chiefComplaints  String?     @db.Text
  diagnosis        String?     @db.Text
  investigation    String?     @db.Text
  medicines        Json?       // Stored as array of { name, dosage, duration }
  
  appointment      Appointment @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  doctor          Doctor      @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  patient         Patient     @relation(fields: [patientId], references: [id], onDelete: Cascade)
  
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
}